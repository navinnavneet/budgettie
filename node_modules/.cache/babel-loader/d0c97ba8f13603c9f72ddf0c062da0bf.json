{"ast":null,"code":"import * as actionTypes from '../actions/actionTypes';\nimport { updateObject, checkValidity, percentageCalculator } from '../../Utility/Utility';\nconst initialState = {\n  data: {\n    inc: {\n      description: {\n        value: '',\n        rules: {\n          isRequired: true\n        }\n      },\n      value: {\n        value: '',\n        rules: {\n          isRequired: true,\n          isNumeric: true\n        }\n      },\n      type: 'inc'\n    },\n    exp: {\n      description: {\n        value: '',\n        rules: {\n          isRequired: true\n        }\n      },\n      value: {\n        value: '',\n        rules: {\n          isRequired: true,\n          isNumeric: true\n        }\n      },\n      type: 'exp'\n    }\n  },\n  showSummary: false,\n  isIncome: true,\n  event: null,\n  isValid: false,\n  budgetSummary: {\n    inc: [],\n    exp: []\n  },\n  totalBudget: 0,\n  totalIncome: 0,\n  totalExpenses: 0,\n  totalPercentage: null\n};\n\nconst clearInputData = (state, action) => {\n  const updatedIncDes = updateObject(state.data.inc.description, {\n    value: ''\n  });\n  const updatedIncVal = updateObject(state.data.inc.value, {\n    value: ''\n  });\n  const updatedInc = updateObject(state.data.inc, {\n    description: updatedIncDes,\n    value: updatedIncVal\n  });\n  const updatedExpDes = updateObject(state.data.exp.description, {\n    value: ''\n  });\n  const updatedExpVal = updateObject(state.data.exp.value, {\n    value: ''\n  });\n  const updatedExp = updateObject(state.data.exp, {\n    description: updatedExpDes,\n    value: updatedExpVal\n  });\n  return updateObject(state.data, {\n    inc: updatedInc,\n    exp: updatedExp\n  });\n};\n\nconst takeInput = (state, action) => {\n  const updatedIncExpType = updateObject(state.data[action.payLoad.incExp][action.payLoad.type], {\n    value: action.payLoad.event.target.value\n  });\n  const updatedIncExp = updateObject(state.data[action.payLoad.incExp], {\n    [action.payLoad.type]: updatedIncExpType\n  });\n  const updatedData = updateObject(state.data, {\n    [action.payLoad.incExp]: updatedIncExp\n  });\n  let isValid = false;\n\n  if (checkValidity(updatedData[action.payLoad.incExp].description.value, updatedData[action.payLoad.incExp].description.rules) && checkValidity(updatedData[action.payLoad.incExp].value.value, updatedData[action.payLoad.incExp].value.rules)) {\n    isValid = true;\n  }\n\n  return updateObject(state, {\n    data: updatedData,\n    event: action.payLoad.event,\n    isValid: isValid\n  });\n};\n\nconst addItem = (state, action) => {\n  action.event.preventDefault();\n  let id;\n\n  if (state.budgetSummary[action.data.type].length === 0) {\n    id = 0;\n  } else {\n    id = state.budgetSummary[action.data.type][state.budgetSummary[action.data.type].length - 1].id + 1;\n  }\n\n  let budget = state.totalBudget;\n  let income = state.totalIncome;\n  let expense = state.totalExpenses;\n  let updatedBudgetSummary;\n\n  if (action.data.type === 'inc') {\n    budget = budget + parseFloat(action.data.value.value);\n    income = income + parseFloat(action.data.value.value);\n    const incBudget = {\n      des: action.data.description.value,\n      val: parseFloat(action.data.value.value).toFixed(2),\n      id: id\n    };\n    const incBudgetSummary = [...state.budgetSummary.inc];\n    incBudgetSummary.push(incBudget);\n    const expBudgetArr = [...state.budgetSummary.exp];\n    let expBudgetSummary;\n\n    if (expBudgetArr.length) {\n      expBudgetSummary = expBudgetArr.map(expBudget => {\n        const perc = percentageCalculator(expBudget.val, income);\n        return updateObject(expBudget, {\n          perc: perc\n        });\n      });\n      updatedBudgetSummary = updateObject(state.budgetSummary, {\n        inc: incBudgetSummary,\n        exp: expBudgetSummary\n      });\n    } else {\n      updatedBudgetSummary = updateObject(state.budgetSummary, {\n        inc: incBudgetSummary\n      });\n    }\n  }\n\n  if (action.data.type === 'exp') {\n    budget = budget - parseFloat(action.data.value.value);\n    expense = expense + parseFloat(action.data.value.value);\n    const expBudget = {\n      des: action.data.description.value,\n      val: parseFloat(action.data.value.value).toFixed(2),\n      id: id,\n      perc: percentageCalculator(action.data.value.value, income)\n    };\n    const expBudgetSummary = [...state.budgetSummary.exp];\n    expBudgetSummary.push(expBudget);\n    updatedBudgetSummary = updateObject(state.budgetSummary, {\n      exp: expBudgetSummary\n    });\n  }\n\n  const percentage = percentageCalculator(expense, income);\n  Array.from(document.querySelectorAll(\"input\")).forEach(input => input.value = null);\n  return updateObject(state, {\n    budgetSummary: updatedBudgetSummary,\n    data: clearInputData(state, action),\n    totalBudget: budget,\n    totalIncome: income,\n    totalExpenses: expense,\n    totalPercentage: percentage,\n    isItemAdded: true\n  });\n};\n\nconst removeItem = (state, action) => {\n  const incExp = [...state.budgetSummary[action.payLoad.type]];\n  const updatedIncExpSummaryRemove = incExp.filter(data => data.id !== action.payLoad.id);\n  let updatedBudgetSummaryRemove = updateObject(state.budgetSummary, {\n    [action.payLoad.type]: updatedIncExpSummaryRemove\n  });\n  let budgetRemove = state.totalBudget;\n  let incomeRemove = state.totalIncome;\n  let expenseRemove = state.totalExpenses;\n  const data = incExp.filter(data => data.id === action.payLoad.id);\n\n  if (action.payLoad.type === 'inc') {\n    budgetRemove = budgetRemove - parseFloat(data[0].val);\n    incomeRemove = incomeRemove - parseFloat(data[0].val);\n    const expBudgetArr = [...state.budgetSummary.exp];\n    const expBudgetSummary = expBudgetArr.map(expBudget => {\n      const perc = percentageCalculator(expBudget.val, incomeRemove);\n      return updateObject(expBudget, {\n        perc: perc\n      });\n    });\n    updatedBudgetSummaryRemove = updateObject(state.budgetSummary, {\n      exp: expBudgetSummary,\n      inc: updatedIncExpSummaryRemove\n    });\n  }\n\n  if (action.payLoad.type === 'exp') {\n    budgetRemove = budgetRemove + parseFloat(data[0].val);\n    expenseRemove = expenseRemove - parseFloat(data[0].val);\n  }\n\n  const percentageRemove = percentageCalculator(expenseRemove, incomeRemove);\n  return updateObject(state, {\n    budgetSummary: updatedBudgetSummaryRemove,\n    totalBudget: budgetRemove,\n    totalIncome: incomeRemove,\n    totalExpenses: expenseRemove,\n    totalPercentage: percentageRemove\n  });\n};\n\nconst hideSummary = (state, action) => {\n  return updateObject(state, {\n    showSummary: false\n  });\n};\n\nconst showSummary = (state, action) => {\n  return updateObject(state, {\n    showSummary: true\n  });\n};\n\nconst switchIncExp = (state, action) => {\n  const isInc = state.isIncome;\n  return updateObject(state, {\n    isIncome: !isInc\n  });\n};\n\nconst reducer = (state = initialState, action) => {\n  switch (action.type) {\n    case actionTypes.TAKE_INPUT:\n      return takeInput(state, action);\n\n    case actionTypes.SHOW_SUMMARY:\n      return showSummary(state, action);\n\n    case actionTypes.HIDE_SUMMARY:\n      return hideSummary(state, action);\n\n    case actionTypes.SWITCH_INC_EXP:\n      return switchIncExp(state, action);\n\n    case actionTypes.ADD_iTEM:\n      return addItem(state, action);\n\n    case actionTypes.REMOVE_iTEM:\n      return removeItem(state, action);\n\n    default:\n      return state;\n  }\n};\n\nexport default reducer;","map":{"version":3,"sources":["/home/navin/React-tuorial-1/budgettie/src/store/reducers/budgetBuilder.js"],"names":["actionTypes","updateObject","checkValidity","percentageCalculator","initialState","data","inc","description","value","rules","isRequired","isNumeric","type","exp","showSummary","isIncome","event","isValid","budgetSummary","totalBudget","totalIncome","totalExpenses","totalPercentage","clearInputData","state","action","updatedIncDes","updatedIncVal","updatedInc","updatedExpDes","updatedExpVal","updatedExp","takeInput","updatedIncExpType","payLoad","incExp","target","updatedIncExp","updatedData","addItem","preventDefault","id","length","budget","income","expense","updatedBudgetSummary","parseFloat","incBudget","des","val","toFixed","incBudgetSummary","push","expBudgetArr","expBudgetSummary","map","expBudget","perc","percentage","Array","from","document","querySelectorAll","forEach","input","isItemAdded","removeItem","updatedIncExpSummaryRemove","filter","updatedBudgetSummaryRemove","budgetRemove","incomeRemove","expenseRemove","percentageRemove","hideSummary","switchIncExp","isInc","reducer","TAKE_INPUT","SHOW_SUMMARY","HIDE_SUMMARY","SWITCH_INC_EXP","ADD_iTEM","REMOVE_iTEM"],"mappings":"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","sourcesContent":["import * as actionTypes from '../actions/actionTypes';\nimport { updateObject, checkValidity, percentageCalculator } from '../../Utility/Utility';\n\nconst initialState = {\n        data: { \n            inc: {\n                description: {\n                    value: '',\n                    rules: {\n                        isRequired: true\n                    }\n                },\n                value: {\n                    value: '',\n                    rules: {\n                        isRequired: true,\n                        isNumeric: true\n                    }\n                },\n                type: 'inc'\n            },\n            exp: {\n                description: {\n                    value: '',\n                    rules: {\n                        isRequired: true\n                    }\n                },\n                value: {\n                    value: '',\n                    rules: {\n                        isRequired: true,\n                        isNumeric: true\n                    }\n                },\n                type: 'exp'\n            }\n        },\n        showSummary: false,\n        isIncome: true,\n        event: null,\n        isValid: false,\n        budgetSummary: {\n            inc: [], \n            exp: [],\n        },\n        totalBudget: 0,\n        totalIncome: 0,\n        totalExpenses: 0,\n        totalPercentage: null\n    }\n\nconst clearInputData = (state, action) => {\n    const updatedIncDes = updateObject(state.data.inc.description, {\n        value: ''\n    });\n    const updatedIncVal = updateObject(state.data.inc.value, {\n        value: ''\n    });\n    const updatedInc = updateObject(state.data.inc, {\n        description: updatedIncDes,\n        value: updatedIncVal\n    });\n\n    const updatedExpDes = updateObject(state.data.exp.description, {\n        value: ''\n    });\n    const updatedExpVal = updateObject(state.data.exp.value, {\n        value: ''\n    });\n    const updatedExp = updateObject(state.data.exp, {\n        description: updatedExpDes,\n        value: updatedExpVal\n    });\n\n    return updateObject(state.data, {\n        inc: updatedInc,\n        exp: updatedExp\n    })\n}\n\nconst takeInput = (state, action) => {\n    const updatedIncExpType = updateObject(state.data[action.payLoad.incExp][action.payLoad.type], {\n        value: action.payLoad.event.target.value\n    });\n    const updatedIncExp = updateObject(state.data[action.payLoad.incExp], {\n                [action.payLoad.type]: updatedIncExpType\n    });\n    const updatedData = updateObject(state.data, {\n                [action.payLoad.incExp]: updatedIncExp\n    });\n\n    let isValid = false;\n    if(checkValidity(updatedData[action.payLoad.incExp].description.value, \n                    updatedData[action.payLoad.incExp].description.rules) &&\n        checkValidity(updatedData[action.payLoad.incExp].value.value, \n                    updatedData[action.payLoad.incExp].value.rules)) {\n                    isValid = true;\n    }\n            \n    return updateObject(state, {\n        data: updatedData,\n        event: action.payLoad.event,\n        isValid: isValid\n    });\n}\n\nconst addItem = (state, action) => {\n    action.event.preventDefault();\n    let id;\n    if (state.budgetSummary[action.data.type].length === 0) {\n        id = 0;\n    } else {\n        id = state.budgetSummary[action.data.type][state.budgetSummary[action.data.type].length - 1].id + 1;\n    }\n\n    let budget = state.totalBudget;\n    let income = state.totalIncome;\n    let expense = state.totalExpenses;\n    let updatedBudgetSummary;\n\n    if (action.data.type === 'inc') {\n        budget = budget + parseFloat(action.data.value.value);\n        income = income + parseFloat(action.data.value.value);\n        const incBudget = {\n            des: action.data.description.value, \n            val: parseFloat(action.data.value.value).toFixed(2),\n            id: id\n        };\n        const incBudgetSummary = [\n            ...state.budgetSummary.inc\n        ];\n        incBudgetSummary.push(incBudget);\n\n        const expBudgetArr = [\n            ...state.budgetSummary.exp\n        ];\n\n        let expBudgetSummary;\n        if (expBudgetArr.length) {\n            expBudgetSummary = expBudgetArr.map(expBudget => {\n                const perc = percentageCalculator(expBudget.val, income);\n                return updateObject(expBudget, {\n                    perc: perc\n                });\n            });\n            updatedBudgetSummary = updateObject(state.budgetSummary, {\n                inc: incBudgetSummary,\n                exp: expBudgetSummary\n            });\n        } else {\n            updatedBudgetSummary = updateObject(state.budgetSummary, {\n                inc: incBudgetSummary\n            });\n        }\n    }\n\n    if (action.data.type === 'exp') {\n        budget = budget - parseFloat(action.data.value.value);\n        expense = expense + parseFloat(action.data.value.value);\n        const expBudget = {\n            des: action.data.description.value, \n            val: parseFloat(action.data.value.value).toFixed(2),\n            id: id ,\n            perc: percentageCalculator(action.data.value.value, income)\n        };\n        const expBudgetSummary = [\n            ...state.budgetSummary.exp\n        ];\n        expBudgetSummary.push(expBudget);\n        updatedBudgetSummary = updateObject(state.budgetSummary, {\n            exp: expBudgetSummary\n        });\n    }\n\n    const percentage = percentageCalculator(expense, income);\n\n    Array.from(document.querySelectorAll(\"input\"))\n    .forEach(input => (input.value = null)\n    );\n\n\n    return updateObject(state, {\n        budgetSummary: updatedBudgetSummary,\n        data: clearInputData(state, action),\n        totalBudget: budget,\n        totalIncome: income,\n        totalExpenses: expense,\n        totalPercentage: percentage,\n        isItemAdded: true\n    });\n}\n\nconst removeItem = (state, action) => {\n    const incExp = [\n        ...state.budgetSummary[action.payLoad.type]\n    ];\n    const updatedIncExpSummaryRemove = incExp.filter(data => data.id !== action.payLoad.id);\n    let updatedBudgetSummaryRemove = updateObject(state.budgetSummary, {\n        [action.payLoad.type]: updatedIncExpSummaryRemove\n    });\n\n    let budgetRemove = state.totalBudget;\n    let incomeRemove = state.totalIncome;\n    let expenseRemove = state.totalExpenses;\n    const data = incExp.filter(data => data.id === action.payLoad.id);\n\n    if (action.payLoad.type === 'inc') {\n        budgetRemove = budgetRemove - parseFloat(data[0].val);\n        incomeRemove = incomeRemove - parseFloat(data[0].val);\n        const expBudgetArr = [\n            ...state.budgetSummary.exp\n        ];\n\n        const expBudgetSummary = expBudgetArr.map(expBudget => {\n            const perc = percentageCalculator(expBudget.val, incomeRemove);\n            return updateObject(expBudget, {\n                perc: perc\n            })\n        });\n        updatedBudgetSummaryRemove = updateObject(state.budgetSummary, {\n            exp: expBudgetSummary,\n            inc: updatedIncExpSummaryRemove\n        })\n    }\n\n    if (action.payLoad.type === 'exp') {\n        budgetRemove = budgetRemove + parseFloat(data[0].val);\n        expenseRemove = expenseRemove - parseFloat(data[0].val);\n    }\n\n    const percentageRemove = percentageCalculator(expenseRemove, incomeRemove);\n\n    return updateObject(state, {\n        budgetSummary: updatedBudgetSummaryRemove,\n        totalBudget: budgetRemove,\n        totalIncome: incomeRemove,\n        totalExpenses: expenseRemove,\n        totalPercentage: percentageRemove\n    });\n}\n\n\nconst hideSummary = (state, action) => {\n    return updateObject(state, {\n        showSummary: false\n    });\n}\n\nconst showSummary = (state, action) => {\n    return updateObject(state, {\n        showSummary: true\n    });\n}\n\nconst switchIncExp = (state, action) => {\n    const isInc = state.isIncome;\n    return updateObject(state, {\n        isIncome: !isInc\n    });\n}\n\nconst reducer = (state = initialState, action) => {\n    switch (action.type) {\n        case actionTypes.TAKE_INPUT: return takeInput(state, action);\n\n        case actionTypes.SHOW_SUMMARY: return showSummary(state, action);\n\n        case actionTypes.HIDE_SUMMARY: return hideSummary(state, action);\n\n        case actionTypes.SWITCH_INC_EXP: return switchIncExp(state, action);\n\n        case actionTypes.ADD_iTEM: return addItem (state, action);\n\n        case actionTypes.REMOVE_iTEM: return removeItem(state, action);\n\n        default: return state;\n    }\n}\n\nexport default reducer;"]},"metadata":{},"sourceType":"module"}