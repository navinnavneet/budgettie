{"ast":null,"code":"import * as actionTypes from '../actions/actionTypes';\nimport { updateObject, percentageCalculator } from '../../Utility/Utility';\nimport { showSummary } from '../actions/budgetBuilder';\nconst initialState = {\n  budgetSummary: {\n    inc: [],\n    exp: []\n  },\n  totalBudget: 0,\n  totalIncome: 0,\n  totalExpenses: 0,\n  totalPercentage: null,\n  data: {\n    inc: {\n      description: null,\n      value: null,\n      type: 'inc'\n    },\n    exp: {\n      description: null,\n      value: null,\n      type: 'exp'\n    }\n  },\n  showSummary: false\n};\n\nconst takeInput = (state, action) => {\n  const updatedIncExp = updateObject(state.data[action.payLoad.incExp], {\n    [action.payLoad.type]: action.payLoad.event.target.value\n  });\n  const updatedData = updateObject(state.data, {\n    [action.payLoad.incExp]: updatedIncExp\n  });\n  return updateObject(state, {\n    data: updatedData\n  });\n};\n\nconst addItem = (state, action) => {\n  let id;\n\n  if (state.budgetSummary[action.data.type].length === 0) {\n    id = 0;\n  } else {\n    id = state.budgetSummary[action.data.type][state.budgetSummary[action.data.type].length - 1].id + 1;\n  }\n\n  let budget = state.totalBudget;\n  let income = state.totalIncome;\n  let expense = state.totalExpenses;\n  let updatedBudgetSummary;\n\n  if (action.data.type === 'inc') {\n    budget = budget + parseFloat(action.data.value);\n    income = income + parseFloat(action.data.value);\n    const incBudget = {\n      des: action.data.description,\n      val: parseFloat(action.data.value).toFixed(2),\n      id: id\n    };\n    const incBudgetSummary = [...state.budgetSummary.inc];\n    incBudgetSummary.push(incBudget);\n    const expBudgetArr = [...state.budgetSummary.exp];\n    const expBudgetSummary = expBudgetArr.map(expBudget => {\n      const perc = percentageCalculator(expBudget.val, income);\n      return updateObject(expBudget, {\n        perc: perc\n      });\n    });\n    updatedBudgetSummary = updateObject(state.budgetSummary, {\n      inc: incBudgetSummary,\n      exp: expBudgetSummary\n    });\n  }\n\n  if (action.data.type === 'exp') {\n    budget = budget - parseFloat(action.data.value);\n    expense = expense + parseFloat(action.data.value);\n    const expBudget = {\n      des: action.data.description,\n      val: parseFloat(action.data.value).toFixed(2),\n      id: id,\n      perc: percentageCalculator(action.data.value, income)\n    };\n    const expBudgetSummary = [...state.budgetSummary.exp];\n    expBudgetSummary.push(expBudget);\n    updatedBudgetSummary = updateObject(state.budgetSummary, {\n      exp: expBudgetSummary\n    });\n  }\n\n  const percentage = percentageCalculator(expense, income);\n  return updateObject(state, {\n    budgetSummary: updatedBudgetSummary,\n    totalBudget: budget,\n    totalIncome: income,\n    totalExpenses: expense,\n    totalPercentage: percentage\n  });\n};\n\nconst removeItem = (state, action) => {\n  const incExp = [...state.budgetSummary[action.payLoad.type]];\n  const updatedIncExpSummaryRemove = incExp.filter(data => data.id !== action.payLoad.id);\n  let updatedBudgetSummaryRemove = updateObject(state.budgetSummary, {\n    [action.payLoad.type]: updatedIncExpSummaryRemove\n  });\n  let budgetRemove = state.totalBudget;\n  let incomeRemove = state.totalIncome;\n  let expenseRemove = state.totalExpenses;\n  const data = incExp.filter(data => data.id === action.payLoad.id);\n\n  if (action.payLoad.type === 'inc') {\n    budgetRemove = budgetRemove - parseFloat(data[0].val);\n    incomeRemove = incomeRemove - parseFloat(data[0].val);\n    const expBudgetArr = [...state.budgetSummary.exp];\n    const expBudgetSummary = expBudgetArr.map(expBudget => {\n      const perc = percentageCalculator(expBudget.val, incomeRemove);\n      return updateObject(expBudget, {\n        perc: perc\n      });\n    });\n    updatedBudgetSummaryRemove = updateObject(state.budgetSummary, {\n      exp: expBudgetSummary,\n      inc: updatedIncExpSummaryRemove\n    });\n  }\n\n  if (action.payLoad.type === 'exp') {\n    budgetRemove = budgetRemove + parseFloat(data[0].val);\n    expenseRemove = expenseRemove - parseFloat(data[0].val);\n  }\n\n  const percentageRemove = percentageCalculator(expenseRemove, incomeRemove);\n  return updateObject(state, {\n    budgetSummary: updatedBudgetSummaryRemove,\n    totalBudget: budgetRemove,\n    totalIncome: incomeRemove,\n    totalExpenses: expenseRemove,\n    totalPercentage: percentageRemove\n  });\n};\n\nconst hideSummary = (state, action) => {\n  return updateObject(state, {\n    showSummary: false\n  });\n};\n\nconst showSummaryFunc = (state, action) => {\n  return updateObject(state, {\n    showSummary: true\n  });\n};\n\nconst reducer = (state = initialState, action) => {\n  switch (action.type) {\n    case actionTypes.TAKE_INPUT:\n      return takeInput(state, action);\n\n    case actionTypes.ADD_iTEM:\n      return addItem(state, action);\n\n    case actionTypes.REMOVE_iTEM:\n      return removeItem(state, action);\n\n    case actionTypes.SHOW_SUMMARY:\n      return showSummaryFunc(state, action);\n\n    case actionTypes.HIDE_SUMMARY:\n      return hideSummary(state, action);\n\n    default:\n      return state;\n  }\n};\n\nexport default reducer;","map":{"version":3,"sources":["/home/navin/React-tuorial-1/budgettie/src/store/reducers/reducers.js"],"names":["actionTypes","updateObject","percentageCalculator","showSummary","initialState","budgetSummary","inc","exp","totalBudget","totalIncome","totalExpenses","totalPercentage","data","description","value","type","takeInput","state","action","updatedIncExp","payLoad","incExp","event","target","updatedData","addItem","id","length","budget","income","expense","updatedBudgetSummary","parseFloat","incBudget","des","val","toFixed","incBudgetSummary","push","expBudgetArr","expBudgetSummary","map","expBudget","perc","percentage","removeItem","updatedIncExpSummaryRemove","filter","updatedBudgetSummaryRemove","budgetRemove","incomeRemove","expenseRemove","percentageRemove","hideSummary","showSummaryFunc","reducer","TAKE_INPUT","ADD_iTEM","REMOVE_iTEM","SHOW_SUMMARY","HIDE_SUMMARY"],"mappings":"AAAA,OAAO,KAAKA,WAAZ,MAA6B,wBAA7B;AACA,SAASC,YAAT,EAAuBC,oBAAvB,QAAmD,uBAAnD;AACA,SAASC,WAAT,QAA4B,0BAA5B;AAEA,MAAMC,YAAY,GAAG;AACbC,EAAAA,aAAa,EAAE;AACXC,IAAAA,GAAG,EAAE,EADM;AAEXC,IAAAA,GAAG,EAAE;AAFM,GADF;AAKbC,EAAAA,WAAW,EAAE,CALA;AAMbC,EAAAA,WAAW,EAAE,CANA;AAObC,EAAAA,aAAa,EAAE,CAPF;AAQbC,EAAAA,eAAe,EAAE,IARJ;AASbC,EAAAA,IAAI,EAAE;AACFN,IAAAA,GAAG,EAAE;AACDO,MAAAA,WAAW,EAAE,IADZ;AAEDC,MAAAA,KAAK,EAAE,IAFN;AAGDC,MAAAA,IAAI,EAAE;AAHL,KADH;AAMFR,IAAAA,GAAG,EAAE;AACDM,MAAAA,WAAW,EAAE,IADZ;AAEDC,MAAAA,KAAK,EAAE,IAFN;AAGDC,MAAAA,IAAI,EAAE;AAHL;AANH,GATO;AAqBbZ,EAAAA,WAAW,EAAE;AArBA,CAArB;;AAwBA,MAAMa,SAAS,GAAG,CAACC,KAAD,EAAQC,MAAR,KAAmB;AACjC,QAAMC,aAAa,GAAGlB,YAAY,CAACgB,KAAK,CAACL,IAAN,CAAWM,MAAM,CAACE,OAAP,CAAeC,MAA1B,CAAD,EAAoC;AAC1D,KAACH,MAAM,CAACE,OAAP,CAAeL,IAAhB,GAAuBG,MAAM,CAACE,OAAP,CAAeE,KAAf,CAAqBC,MAArB,CAA4BT;AADO,GAApC,CAAlC;AAGQ,QAAMU,WAAW,GAAGvB,YAAY,CAACgB,KAAK,CAACL,IAAP,EAAa;AACzC,KAACM,MAAM,CAACE,OAAP,CAAeC,MAAhB,GAAyBF;AADgB,GAAb,CAAhC;AAGA,SAAOlB,YAAY,CAACgB,KAAD,EAAQ;AACvBL,IAAAA,IAAI,EAAEY;AADiB,GAAR,CAAnB;AAGX,CAVD;;AAYA,MAAMC,OAAO,GAAG,CAACR,KAAD,EAAQC,MAAR,KAAmB;AAC/B,MAAIQ,EAAJ;;AACQ,MAAIT,KAAK,CAACZ,aAAN,CAAoBa,MAAM,CAACN,IAAP,CAAYG,IAAhC,EAAsCY,MAAtC,KAAiD,CAArD,EAAwD;AACpDD,IAAAA,EAAE,GAAG,CAAL;AACH,GAFD,MAEO;AACHA,IAAAA,EAAE,GAAGT,KAAK,CAACZ,aAAN,CAAoBa,MAAM,CAACN,IAAP,CAAYG,IAAhC,EAAsCE,KAAK,CAACZ,aAAN,CAAoBa,MAAM,CAACN,IAAP,CAAYG,IAAhC,EAAsCY,MAAtC,GAA+C,CAArF,EAAwFD,EAAxF,GAA6F,CAAlG;AACH;;AAED,MAAIE,MAAM,GAAGX,KAAK,CAACT,WAAnB;AACA,MAAIqB,MAAM,GAAGZ,KAAK,CAACR,WAAnB;AACA,MAAIqB,OAAO,GAAGb,KAAK,CAACP,aAApB;AACA,MAAIqB,oBAAJ;;AAEA,MAAIb,MAAM,CAACN,IAAP,CAAYG,IAAZ,KAAqB,KAAzB,EAAgC;AAC5Ba,IAAAA,MAAM,GAAGA,MAAM,GAAGI,UAAU,CAACd,MAAM,CAACN,IAAP,CAAYE,KAAb,CAA5B;AACAe,IAAAA,MAAM,GAAGA,MAAM,GAAGG,UAAU,CAACd,MAAM,CAACN,IAAP,CAAYE,KAAb,CAA5B;AACA,UAAMmB,SAAS,GAAG;AACdC,MAAAA,GAAG,EAAEhB,MAAM,CAACN,IAAP,CAAYC,WADH;AAEdsB,MAAAA,GAAG,EAAEH,UAAU,CAACd,MAAM,CAACN,IAAP,CAAYE,KAAb,CAAV,CAA8BsB,OAA9B,CAAsC,CAAtC,CAFS;AAGdV,MAAAA,EAAE,EAAEA;AAHU,KAAlB;AAKA,UAAMW,gBAAgB,GAAG,CACrB,GAAGpB,KAAK,CAACZ,aAAN,CAAoBC,GADF,CAAzB;AAGA+B,IAAAA,gBAAgB,CAACC,IAAjB,CAAsBL,SAAtB;AAEA,UAAMM,YAAY,GAAG,CACjB,GAAGtB,KAAK,CAACZ,aAAN,CAAoBE,GADN,CAArB;AAIA,UAAMiC,gBAAgB,GAAGD,YAAY,CAACE,GAAb,CAAiBC,SAAS,IAAI;AACnD,YAAMC,IAAI,GAAGzC,oBAAoB,CAACwC,SAAS,CAACP,GAAX,EAAgBN,MAAhB,CAAjC;AACA,aAAO5B,YAAY,CAACyC,SAAD,EAAY;AAC3BC,QAAAA,IAAI,EAAEA;AADqB,OAAZ,CAAnB;AAGH,KALwB,CAAzB;AAMAZ,IAAAA,oBAAoB,GAAG9B,YAAY,CAACgB,KAAK,CAACZ,aAAP,EAAsB;AACzDC,MAAAA,GAAG,EAAE+B,gBADoD;AAEzD9B,MAAAA,GAAG,EAAEiC;AAFoD,KAAtB,CAAnC;AAIH;;AAED,MAAItB,MAAM,CAACN,IAAP,CAAYG,IAAZ,KAAqB,KAAzB,EAAgC;AAC5Ba,IAAAA,MAAM,GAAGA,MAAM,GAAGI,UAAU,CAACd,MAAM,CAACN,IAAP,CAAYE,KAAb,CAA5B;AACAgB,IAAAA,OAAO,GAAGA,OAAO,GAAGE,UAAU,CAACd,MAAM,CAACN,IAAP,CAAYE,KAAb,CAA9B;AACA,UAAM4B,SAAS,GAAG;AACdR,MAAAA,GAAG,EAAEhB,MAAM,CAACN,IAAP,CAAYC,WADH;AAEdsB,MAAAA,GAAG,EAAEH,UAAU,CAACd,MAAM,CAACN,IAAP,CAAYE,KAAb,CAAV,CAA8BsB,OAA9B,CAAsC,CAAtC,CAFS;AAGdV,MAAAA,EAAE,EAAEA,EAHU;AAIdiB,MAAAA,IAAI,EAAEzC,oBAAoB,CAACgB,MAAM,CAACN,IAAP,CAAYE,KAAb,EAAoBe,MAApB;AAJZ,KAAlB;AAMA,UAAMW,gBAAgB,GAAG,CACrB,GAAGvB,KAAK,CAACZ,aAAN,CAAoBE,GADF,CAAzB;AAGAiC,IAAAA,gBAAgB,CAACF,IAAjB,CAAsBI,SAAtB;AACAX,IAAAA,oBAAoB,GAAG9B,YAAY,CAACgB,KAAK,CAACZ,aAAP,EAAsB;AACzDE,MAAAA,GAAG,EAAEiC;AADoD,KAAtB,CAAnC;AAGH;;AAED,QAAMI,UAAU,GAAG1C,oBAAoB,CAAC4B,OAAD,EAAUD,MAAV,CAAvC;AAEA,SAAO5B,YAAY,CAACgB,KAAD,EAAQ;AACvBZ,IAAAA,aAAa,EAAE0B,oBADQ;AAEvBvB,IAAAA,WAAW,EAAEoB,MAFU;AAGvBnB,IAAAA,WAAW,EAAEoB,MAHU;AAIvBnB,IAAAA,aAAa,EAAEoB,OAJQ;AAKvBnB,IAAAA,eAAe,EAAEiC;AALM,GAAR,CAAnB;AAOX,CArED;;AAuEA,MAAMC,UAAU,GAAG,CAAC5B,KAAD,EAAQC,MAAR,KAAmB;AAClC,QAAMG,MAAM,GAAG,CACH,GAAGJ,KAAK,CAACZ,aAAN,CAAoBa,MAAM,CAACE,OAAP,CAAeL,IAAnC,CADA,CAAf;AAGQ,QAAM+B,0BAA0B,GAAGzB,MAAM,CAAC0B,MAAP,CAAcnC,IAAI,IAAIA,IAAI,CAACc,EAAL,KAAYR,MAAM,CAACE,OAAP,CAAeM,EAAjD,CAAnC;AACA,MAAIsB,0BAA0B,GAAG/C,YAAY,CAACgB,KAAK,CAACZ,aAAP,EAAsB;AAC/D,KAACa,MAAM,CAACE,OAAP,CAAeL,IAAhB,GAAuB+B;AADwC,GAAtB,CAA7C;AAIA,MAAIG,YAAY,GAAGhC,KAAK,CAACT,WAAzB;AACA,MAAI0C,YAAY,GAAGjC,KAAK,CAACR,WAAzB;AACA,MAAI0C,aAAa,GAAGlC,KAAK,CAACP,aAA1B;AACA,QAAME,IAAI,GAAGS,MAAM,CAAC0B,MAAP,CAAcnC,IAAI,IAAIA,IAAI,CAACc,EAAL,KAAYR,MAAM,CAACE,OAAP,CAAeM,EAAjD,CAAb;;AAEA,MAAIR,MAAM,CAACE,OAAP,CAAeL,IAAf,KAAwB,KAA5B,EAAmC;AAC/BkC,IAAAA,YAAY,GAAGA,YAAY,GAAGjB,UAAU,CAACpB,IAAI,CAAC,CAAD,CAAJ,CAAQuB,GAAT,CAAxC;AACAe,IAAAA,YAAY,GAAGA,YAAY,GAAGlB,UAAU,CAACpB,IAAI,CAAC,CAAD,CAAJ,CAAQuB,GAAT,CAAxC;AACA,UAAMI,YAAY,GAAG,CACjB,GAAGtB,KAAK,CAACZ,aAAN,CAAoBE,GADN,CAArB;AAIA,UAAMiC,gBAAgB,GAAGD,YAAY,CAACE,GAAb,CAAiBC,SAAS,IAAI;AACnD,YAAMC,IAAI,GAAGzC,oBAAoB,CAACwC,SAAS,CAACP,GAAX,EAAgBe,YAAhB,CAAjC;AACA,aAAOjD,YAAY,CAACyC,SAAD,EAAY;AAC3BC,QAAAA,IAAI,EAAEA;AADqB,OAAZ,CAAnB;AAGH,KALwB,CAAzB;AAMAK,IAAAA,0BAA0B,GAAG/C,YAAY,CAACgB,KAAK,CAACZ,aAAP,EAAsB;AAC3DE,MAAAA,GAAG,EAAEiC,gBADsD;AAE3DlC,MAAAA,GAAG,EAAEwC;AAFsD,KAAtB,CAAzC;AAIH;;AAED,MAAI5B,MAAM,CAACE,OAAP,CAAeL,IAAf,KAAwB,KAA5B,EAAmC;AAC/BkC,IAAAA,YAAY,GAAGA,YAAY,GAAGjB,UAAU,CAACpB,IAAI,CAAC,CAAD,CAAJ,CAAQuB,GAAT,CAAxC;AACAgB,IAAAA,aAAa,GAAGA,aAAa,GAAGnB,UAAU,CAACpB,IAAI,CAAC,CAAD,CAAJ,CAAQuB,GAAT,CAA1C;AACH;;AAED,QAAMiB,gBAAgB,GAAGlD,oBAAoB,CAACiD,aAAD,EAAgBD,YAAhB,CAA7C;AAEA,SAAOjD,YAAY,CAACgB,KAAD,EAAQ;AACvBZ,IAAAA,aAAa,EAAE2C,0BADQ;AAEvBxC,IAAAA,WAAW,EAAEyC,YAFU;AAGvBxC,IAAAA,WAAW,EAAEyC,YAHU;AAIvBxC,IAAAA,aAAa,EAAEyC,aAJQ;AAKvBxC,IAAAA,eAAe,EAAEyC;AALM,GAAR,CAAnB;AAOX,CA/CD;;AAiDA,MAAMC,WAAW,GAAG,CAACpC,KAAD,EAAQC,MAAR,KAAmB;AACnC,SAAOjB,YAAY,CAACgB,KAAD,EAAQ;AACvBd,IAAAA,WAAW,EAAE;AADU,GAAR,CAAnB;AAGH,CAJD;;AAMA,MAAMmD,eAAe,GAAG,CAACrC,KAAD,EAAQC,MAAR,KAAmB;AACvC,SAAOjB,YAAY,CAACgB,KAAD,EAAQ;AACvBd,IAAAA,WAAW,EAAE;AADU,GAAR,CAAnB;AAGH,CAJD;;AAMA,MAAMoD,OAAO,GAAG,CAACtC,KAAK,GAAGb,YAAT,EAAuBc,MAAvB,KAAkC;AAC9C,UAAQA,MAAM,CAACH,IAAf;AACI,SAAKf,WAAW,CAACwD,UAAjB;AAA6B,aAAOxC,SAAS,CAACC,KAAD,EAAQC,MAAR,CAAhB;;AAE7B,SAAKlB,WAAW,CAACyD,QAAjB;AAA2B,aAAOhC,OAAO,CAAER,KAAF,EAASC,MAAT,CAAd;;AAE3B,SAAKlB,WAAW,CAAC0D,WAAjB;AAA8B,aAAOb,UAAU,CAAC5B,KAAD,EAAQC,MAAR,CAAjB;;AAE9B,SAAKlB,WAAW,CAAC2D,YAAjB;AAA+B,aAAOL,eAAe,CAACrC,KAAD,EAAQC,MAAR,CAAtB;;AAE/B,SAAKlB,WAAW,CAAC4D,YAAjB;AAA+B,aAAOP,WAAW,CAACpC,KAAD,EAAQC,MAAR,CAAlB;;AAE/B;AAAS,aAAOD,KAAP;AAXb;AAaH,CAdD;;AAgBA,eAAesC,OAAf","sourcesContent":["import * as actionTypes from '../actions/actionTypes';\nimport { updateObject, percentageCalculator } from '../../Utility/Utility';\nimport { showSummary } from '../actions/budgetBuilder';\n\nconst initialState = {\n        budgetSummary: {\n            inc: [],\n            exp: []\n        },\n        totalBudget: 0,\n        totalIncome: 0,\n        totalExpenses: 0,\n        totalPercentage: null,\n        data: {\n            inc: {\n                description: null,\n                value: null,\n                type: 'inc'\n            },\n            exp: {\n                description: null,\n                value: null,\n                type: 'exp'\n            }\n        },\n        showSummary: false\n    }\n\nconst takeInput = (state, action) => {\n    const updatedIncExp = updateObject(state.data[action.payLoad.incExp], {\n                [action.payLoad.type]: action.payLoad.event.target.value\n            });\n            const updatedData = updateObject(state.data, {\n                [action.payLoad.incExp]: updatedIncExp\n            });\n            return updateObject(state, {\n                data: updatedData\n            });\n}\n\nconst addItem = (state, action) => {\n    let id;\n            if (state.budgetSummary[action.data.type].length === 0) {\n                id = 0;\n            } else {\n                id = state.budgetSummary[action.data.type][state.budgetSummary[action.data.type].length - 1].id + 1;\n            }\n\n            let budget = state.totalBudget;\n            let income = state.totalIncome;\n            let expense = state.totalExpenses;\n            let updatedBudgetSummary;\n\n            if (action.data.type === 'inc') {\n                budget = budget + parseFloat(action.data.value);\n                income = income + parseFloat(action.data.value);\n                const incBudget = {\n                    des: action.data.description, \n                    val: parseFloat(action.data.value).toFixed(2),\n                    id: id \n                };\n                const incBudgetSummary = [\n                    ...state.budgetSummary.inc\n                ];\n                incBudgetSummary.push(incBudget);\n\n                const expBudgetArr = [\n                    ...state.budgetSummary.exp\n                ];\n\n                const expBudgetSummary = expBudgetArr.map(expBudget => {\n                    const perc = percentageCalculator(expBudget.val, income);\n                    return updateObject(expBudget, {\n                        perc: perc\n                    })\n                });\n                updatedBudgetSummary = updateObject(state.budgetSummary, {\n                inc: incBudgetSummary,\n                exp: expBudgetSummary\n            });\n            }\n\n            if (action.data.type === 'exp') {\n                budget = budget - parseFloat(action.data.value);\n                expense = expense + parseFloat(action.data.value);\n                const expBudget = {\n                    des: action.data.description, \n                    val: parseFloat(action.data.value).toFixed(2),\n                    id: id ,\n                    perc: percentageCalculator(action.data.value, income)\n                };\n                const expBudgetSummary = [\n                    ...state.budgetSummary.exp\n                ];\n                expBudgetSummary.push(expBudget);\n                updatedBudgetSummary = updateObject(state.budgetSummary, {\n                exp: expBudgetSummary\n            });\n            }\n\n            const percentage = percentageCalculator(expense, income);\n\n            return updateObject(state, {\n                budgetSummary: updatedBudgetSummary,\n                totalBudget: budget,\n                totalIncome: income,\n                totalExpenses: expense,\n                totalPercentage: percentage\n                });\n}\n\nconst removeItem = (state, action) => {\n    const incExp = [\n                ...state.budgetSummary[action.payLoad.type]\n            ];\n            const updatedIncExpSummaryRemove = incExp.filter(data => data.id !== action.payLoad.id);\n            let updatedBudgetSummaryRemove = updateObject(state.budgetSummary, {\n                [action.payLoad.type]: updatedIncExpSummaryRemove\n            });\n\n            let budgetRemove = state.totalBudget;\n            let incomeRemove = state.totalIncome;\n            let expenseRemove = state.totalExpenses;\n            const data = incExp.filter(data => data.id === action.payLoad.id);\n\n            if (action.payLoad.type === 'inc') {\n                budgetRemove = budgetRemove - parseFloat(data[0].val);\n                incomeRemove = incomeRemove - parseFloat(data[0].val);\n                const expBudgetArr = [\n                    ...state.budgetSummary.exp\n                ];\n\n                const expBudgetSummary = expBudgetArr.map(expBudget => {\n                    const perc = percentageCalculator(expBudget.val, incomeRemove);\n                    return updateObject(expBudget, {\n                        perc: perc\n                    })\n                });\n                updatedBudgetSummaryRemove = updateObject(state.budgetSummary, {\n                    exp: expBudgetSummary,\n                    inc: updatedIncExpSummaryRemove\n                })\n            }\n\n            if (action.payLoad.type === 'exp') {\n                budgetRemove = budgetRemove + parseFloat(data[0].val);\n                expenseRemove = expenseRemove - parseFloat(data[0].val);\n            }\n\n            const percentageRemove = percentageCalculator(expenseRemove, incomeRemove);\n\n            return updateObject(state, {\n                budgetSummary: updatedBudgetSummaryRemove,\n                totalBudget: budgetRemove,\n                totalIncome: incomeRemove,\n                totalExpenses: expenseRemove,\n                totalPercentage: percentageRemove\n            });\n}\n\nconst hideSummary = (state, action) => {\n    return updateObject(state, {\n        showSummary: false\n    });\n}\n\nconst showSummaryFunc = (state, action) => {\n    return updateObject(state, {\n        showSummary: true\n    });\n}\n\nconst reducer = (state = initialState, action) => {\n    switch (action.type) {\n        case actionTypes.TAKE_INPUT: return takeInput(state, action);\n\n        case actionTypes.ADD_iTEM: return addItem (state, action);\n\n        case actionTypes.REMOVE_iTEM: return removeItem(state, action);\n\n        case actionTypes.SHOW_SUMMARY: return showSummaryFunc(state, action);\n\n        case actionTypes.HIDE_SUMMARY: return hideSummary(state, action);\n\n        default: return state;\n    }\n}\n\nexport default reducer;"]},"metadata":{},"sourceType":"module"}