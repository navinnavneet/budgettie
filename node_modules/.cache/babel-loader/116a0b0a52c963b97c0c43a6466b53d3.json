{"ast":null,"code":"import * as actionTypes from '../actions/actionTypes';\nimport { updateObject, percentageCalculator } from '../../Utility/Utility';\nconst initialState = {\n  budgetSummary: {\n    inc: [],\n    exp: []\n  }\n};\n\nconst addItem = (state, action) => {\n  let id;\n\n  if (state.budgetSummary[action.data.type].length === 0) {\n    id = 0;\n  } else {\n    id = state.budgetSummary[action.data.type][state.budgetSummary[action.data.type].length - 1].id + 1;\n  }\n\n  let budget = state.totalBudget;\n  let income = state.totalIncome;\n  let expense = state.totalExpenses;\n  let updatedBudgetSummary;\n\n  if (action.data.type === 'inc') {\n    budget = budget + parseFloat(action.data.value);\n    income = income + parseFloat(action.data.value);\n    const incBudget = {\n      des: action.data.description,\n      val: parseFloat(action.data.value).toFixed(2),\n      id: id\n    };\n    const incBudgetSummary = [...state.budgetSummary.inc];\n    incBudgetSummary.push(incBudget);\n    const expBudgetArr = [...state.budgetSummary.exp];\n    const expBudgetSummary = expBudgetArr.map(expBudget => {\n      const perc = percentageCalculator(expBudget.val, income);\n      return updateObject(expBudget, {\n        perc: perc\n      });\n    });\n    updatedBudgetSummary = updateObject(state.budgetSummary, {\n      inc: incBudgetSummary,\n      exp: expBudgetSummary\n    });\n  }\n\n  if (action.data.type === 'exp') {\n    budget = budget - parseFloat(action.data.value);\n    expense = expense + parseFloat(action.data.value);\n    const expBudget = {\n      des: action.data.description,\n      val: parseFloat(action.data.value).toFixed(2),\n      id: id,\n      perc: percentageCalculator(action.data.value, income)\n    };\n    const expBudgetSummary = [...state.budgetSummary.exp];\n    expBudgetSummary.push(expBudget);\n    updatedBudgetSummary = updateObject(state.budgetSummary, {\n      exp: expBudgetSummary\n    });\n  }\n\n  const percentage = percentageCalculator(expense, income);\n  return updateObject(state, {\n    budgetSummary: updatedBudgetSummary,\n    totalBudget: budget,\n    totalIncome: income,\n    totalExpenses: expense,\n    totalPercentage: percentage\n  });\n};\n\nconst removeItem = (state, action) => {\n  const incExp = [...state.budgetSummary[action.payLoad.type]];\n  const updatedIncExpSummaryRemove = incExp.filter(data => data.id !== action.payLoad.id);\n  let updatedBudgetSummaryRemove = updateObject(state.budgetSummary, {\n    [action.payLoad.type]: updatedIncExpSummaryRemove\n  });\n  let budgetRemove = state.totalBudget;\n  let incomeRemove = state.totalIncome;\n  let expenseRemove = state.totalExpenses;\n  const data = incExp.filter(data => data.id === action.payLoad.id);\n\n  if (action.payLoad.type === 'inc') {\n    budgetRemove = budgetRemove - parseFloat(data[0].val);\n    incomeRemove = incomeRemove - parseFloat(data[0].val);\n    const expBudgetArr = [...state.budgetSummary.exp];\n    const expBudgetSummary = expBudgetArr.map(expBudget => {\n      const perc = percentageCalculator(expBudget.val, incomeRemove);\n      return updateObject(expBudget, {\n        perc: perc\n      });\n    });\n    updatedBudgetSummaryRemove = updateObject(state.budgetSummary, {\n      exp: expBudgetSummary,\n      inc: updatedIncExpSummaryRemove\n    });\n  }\n\n  if (action.payLoad.type === 'exp') {\n    budgetRemove = budgetRemove + parseFloat(data[0].val);\n    expenseRemove = expenseRemove - parseFloat(data[0].val);\n  }\n\n  const percentageRemove = percentageCalculator(expenseRemove, incomeRemove);\n  return updateObject(state, {\n    budgetSummary: updatedBudgetSummaryRemove,\n    totalBudget: budgetRemove,\n    totalIncome: incomeRemove,\n    totalExpenses: expenseRemove,\n    totalPercentage: percentageRemove\n  });\n};\n\nconst reducer = (state = initialState, action) => {\n  switch (action.type) {\n    case actionTypes.ADD_iTEM:\n      return addItem(state, action);\n\n    case actionTypes.REMOVE_iTEM:\n      return removeItem(state, action);\n\n    default:\n      return state;\n  }\n};\n\nexport default reducer;","map":{"version":3,"sources":["/home/navin/React-tuorial-1/budgettie/src/store/reducers/budgetSummary.js"],"names":["actionTypes","updateObject","percentageCalculator","initialState","budgetSummary","inc","exp","addItem","state","action","id","data","type","length","budget","totalBudget","income","totalIncome","expense","totalExpenses","updatedBudgetSummary","parseFloat","value","incBudget","des","description","val","toFixed","incBudgetSummary","push","expBudgetArr","expBudgetSummary","map","expBudget","perc","percentage","totalPercentage","removeItem","incExp","payLoad","updatedIncExpSummaryRemove","filter","updatedBudgetSummaryRemove","budgetRemove","incomeRemove","expenseRemove","percentageRemove","reducer","ADD_iTEM","REMOVE_iTEM"],"mappings":"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","sourcesContent":["import * as actionTypes from '../actions/actionTypes';\nimport { updateObject, percentageCalculator } from '../../Utility/Utility';\n\nconst initialState = {\n    budgetSummary: {\n            inc: [],\n            exp: []\n        }\n}\n\nconst addItem = (state, action) => {\n    let id;\n            if (state.budgetSummary[action.data.type].length === 0) {\n                id = 0;\n            } else {\n                id = state.budgetSummary[action.data.type][state.budgetSummary[action.data.type].length - 1].id + 1;\n            }\n\n            let budget = state.totalBudget;\n            let income = state.totalIncome;\n            let expense = state.totalExpenses;\n            let updatedBudgetSummary;\n\n            if (action.data.type === 'inc') {\n                budget = budget + parseFloat(action.data.value);\n                income = income + parseFloat(action.data.value);\n                const incBudget = {\n                    des: action.data.description, \n                    val: parseFloat(action.data.value).toFixed(2),\n                    id: id \n                };\n                const incBudgetSummary = [\n                    ...state.budgetSummary.inc\n                ];\n                incBudgetSummary.push(incBudget);\n\n                const expBudgetArr = [\n                    ...state.budgetSummary.exp\n                ];\n\n                const expBudgetSummary = expBudgetArr.map(expBudget => {\n                    const perc = percentageCalculator(expBudget.val, income);\n                    return updateObject(expBudget, {\n                        perc: perc\n                    })\n                });\n                updatedBudgetSummary = updateObject(state.budgetSummary, {\n                inc: incBudgetSummary,\n                exp: expBudgetSummary\n            });\n            }\n\n            if (action.data.type === 'exp') {\n                budget = budget - parseFloat(action.data.value);\n                expense = expense + parseFloat(action.data.value);\n                const expBudget = {\n                    des: action.data.description, \n                    val: parseFloat(action.data.value).toFixed(2),\n                    id: id ,\n                    perc: percentageCalculator(action.data.value, income)\n                };\n                const expBudgetSummary = [\n                    ...state.budgetSummary.exp\n                ];\n                expBudgetSummary.push(expBudget);\n                updatedBudgetSummary = updateObject(state.budgetSummary, {\n                exp: expBudgetSummary\n            });\n            }\n\n            const percentage = percentageCalculator(expense, income);\n\n            return updateObject(state, {\n                budgetSummary: updatedBudgetSummary,\n                totalBudget: budget,\n                totalIncome: income,\n                totalExpenses: expense,\n                totalPercentage: percentage\n                });\n}\n\nconst removeItem = (state, action) => {\n    const incExp = [\n                ...state.budgetSummary[action.payLoad.type]\n            ];\n            const updatedIncExpSummaryRemove = incExp.filter(data => data.id !== action.payLoad.id);\n            let updatedBudgetSummaryRemove = updateObject(state.budgetSummary, {\n                [action.payLoad.type]: updatedIncExpSummaryRemove\n            });\n\n            let budgetRemove = state.totalBudget;\n            let incomeRemove = state.totalIncome;\n            let expenseRemove = state.totalExpenses;\n            const data = incExp.filter(data => data.id === action.payLoad.id);\n\n            if (action.payLoad.type === 'inc') {\n                budgetRemove = budgetRemove - parseFloat(data[0].val);\n                incomeRemove = incomeRemove - parseFloat(data[0].val);\n                const expBudgetArr = [\n                    ...state.budgetSummary.exp\n                ];\n\n                const expBudgetSummary = expBudgetArr.map(expBudget => {\n                    const perc = percentageCalculator(expBudget.val, incomeRemove);\n                    return updateObject(expBudget, {\n                        perc: perc\n                    })\n                });\n                updatedBudgetSummaryRemove = updateObject(state.budgetSummary, {\n                    exp: expBudgetSummary,\n                    inc: updatedIncExpSummaryRemove\n                })\n            }\n\n            if (action.payLoad.type === 'exp') {\n                budgetRemove = budgetRemove + parseFloat(data[0].val);\n                expenseRemove = expenseRemove - parseFloat(data[0].val);\n            }\n\n            const percentageRemove = percentageCalculator(expenseRemove, incomeRemove);\n\n            return updateObject(state, {\n                budgetSummary: updatedBudgetSummaryRemove,\n                totalBudget: budgetRemove,\n                totalIncome: incomeRemove,\n                totalExpenses: expenseRemove,\n                totalPercentage: percentageRemove\n            });\n}\n\nconst reducer = (state = initialState, action) => {\n    switch (action.type) {\n        case actionTypes.ADD_iTEM: return addItem (state, action);\n\n        case actionTypes.REMOVE_iTEM: return removeItem(state, action);\n\n        default: return state;\n    }\n}\n\nexport default reducer;"]},"metadata":{},"sourceType":"module"}