{"ast":null,"code":"import * as actionTypes from '../actions/actions';\nimport { updateObject, percentageCalculator } from '../../Utility/Utility';\nconst initialState = {\n  budgetSummary: {\n    inc: [],\n    exp: []\n  },\n  totalBudget: 0,\n  totalIncome: 0,\n  totalExpenses: 0,\n  totalPercentage: null,\n  data: {\n    inc: {\n      description: null,\n      value: null,\n      type: 'inc'\n    },\n    exp: {\n      description: null,\n      value: null,\n      type: 'exp'\n    }\n  }\n};\n\nconst reducer = (state = initialState, action) => {\n  switch (action.type) {\n    case actionTypes.TAKE_INPUT:\n      const updatedIncExp = updateObject(state.data[action.payLoad.incExp], {\n        [action.payLoad.type]: action.payLoad.event.target.value\n      });\n      const updatedData = updateObject(state.data, {\n        [action.payLoad.incExp]: updatedIncExp\n      });\n      return updateObject(state, {\n        data: updatedData\n      });\n\n    case actionTypes.ADD_iTEM:\n      let id;\n\n      if (state.budgetSummary[action.data.type].length === 0) {\n        id = 0;\n      } else {\n        id = state.budgetSummary[action.data.type][state.budgetSummary[action.data.type].length - 1].id + 1;\n      }\n\n      let summary = {\n        des: action.data.description,\n        val: parseFloat(action.data.value).toFixed(2),\n        id: id\n      };\n\n      if (action.data.type === 'exp') {\n        summary = {\n          des: action.data.description,\n          val: parseFloat(action.data.value).toFixed(2),\n          id: id,\n          perc: percentageCalculator(action.data.value, state.totalIncome)\n        };\n      }\n\n      const updatedIncExpSummary = [...state.budgetSummary[action.data.type]];\n      updatedIncExpSummary.push(summary);\n      const updatedBudgetSummary = updateObject(state.budgetSummary, {\n        [action.data.type]: updatedIncExpSummary\n      });\n      let budget = state.totalBudget;\n      let income = state.totalIncome;\n      let expense = state.totalExpenses;\n\n      if (action.data.type === 'inc') {\n        budget = budget + parseFloat(action.data.value);\n        income = income + parseFloat(action.data.value);\n      }\n\n      if (action.data.type === 'exp') {\n        budget = budget - parseFloat(action.data.value);\n        expense = expense + parseFloat(action.data.value);\n      }\n\n      const percentage = percentageCalculator(expense, income);\n      return updateObject(state, {\n        budgetSummary: updatedBudgetSummary,\n        totalBudget: budget,\n        totalIncome: income,\n        totalExpenses: expense,\n        totalPercentage: percentage\n      });\n\n    case actionTypes.REMOVE_iTEM:\n      const incExp = [...state.budgetSummary[action.payLoad.type]];\n      const updatedIncExpSummaryRemove = incExp.filter(data => data.id !== action.payLoad.id);\n      const updatedBudgetSummaryRemove = updateObject(state.budgetSummary, {\n        [action.payLoad.type]: updatedIncExpSummaryRemove\n      });\n      let budgetRemove = state.totalBudget;\n      let incomeRemove = state.totalIncome;\n      let expenseRemove = state.totalExpenses;\n      const data = incExp.filter(data => data.id === action.payLoad.id);\n\n      if (action.payLoad.type === 'inc') {\n        budgetRemove = budgetRemove - parseFloat(data[0].val);\n        incomeRemove = incomeRemove - parseFloat(data[0].val);\n      }\n\n      if (action.payLoad.type === 'exp') {\n        budgetRemove = budgetRemove + parseFloat(data[0].val);\n        expenseRemove = expenseRemove - parseFloat(data[0].val);\n      }\n\n      const percentageRemove = percentageCalculator(expenseRemove, incomeRemove);\n      return updateObject(state, {\n        budgetSummary: updatedBudgetSummaryRemove,\n        totalBudget: budgetRemove,\n        totalIncome: incomeRemove,\n        totalExpenses: expenseRemove,\n        totalPercentage: percentageRemove\n      });\n\n    default:\n      return state;\n  }\n};\n\nexport default reducer;","map":{"version":3,"sources":["/home/navin/React-tuorial-1/budgettie/src/store/reducers/reducers.js"],"names":["actionTypes","updateObject","percentageCalculator","initialState","budgetSummary","inc","exp","totalBudget","totalIncome","totalExpenses","totalPercentage","data","description","value","type","reducer","state","action","TAKE_INPUT","updatedIncExp","payLoad","incExp","event","target","updatedData","ADD_iTEM","id","length","summary","des","val","parseFloat","toFixed","perc","updatedIncExpSummary","push","updatedBudgetSummary","budget","income","expense","percentage","REMOVE_iTEM","updatedIncExpSummaryRemove","filter","updatedBudgetSummaryRemove","budgetRemove","incomeRemove","expenseRemove","percentageRemove"],"mappings":"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","sourcesContent":["import * as actionTypes from '../actions/actions';\nimport { updateObject, percentageCalculator } from '../../Utility/Utility';\n\nconst initialState = {\n        budgetSummary: {\n            inc: [],\n            exp: []\n        },\n        totalBudget: 0,\n        totalIncome: 0,\n        totalExpenses: 0,\n        totalPercentage: null,\n        data: {\n            inc: {\n                description: null,\n                value: null,\n                type: 'inc'\n            },\n            exp: {\n                description: null,\n                value: null,\n                type: 'exp'\n            }\n        }\n    }\n\nconst reducer = (state = initialState, action) => {\n    switch (action.type) {\n        case actionTypes.TAKE_INPUT:\n            const updatedIncExp = updateObject(state.data[action.payLoad.incExp], {\n                [action.payLoad.type]: action.payLoad.event.target.value\n            });\n            const updatedData = updateObject(state.data, {\n                [action.payLoad.incExp]: updatedIncExp\n            });\n            return updateObject(state, {\n                data: updatedData\n            });\n\n        case actionTypes.ADD_iTEM:\n            let id;\n            if (state.budgetSummary[action.data.type].length === 0) {\n                id = 0;\n            } else {\n                id = state.budgetSummary[action.data.type][state.budgetSummary[action.data.type].length - 1].id + 1;\n            }\n            let summary = {\n                    des: action.data.description, \n                    val: parseFloat(action.data.value).toFixed(2),\n                    id: id\n                };\n\n            if (action.data.type === 'exp') {\n                summary = {\n                    des: action.data.description, \n                    val: parseFloat(action.data.value).toFixed(2),\n                    id: id ,\n                    perc: percentageCalculator(action.data.value, state.totalIncome)\n                };\n            }\n            const updatedIncExpSummary = [ \n                ...state.budgetSummary[action.data.type] \n            ];\n            updatedIncExpSummary.push(summary);\n            const updatedBudgetSummary = updateObject(state.budgetSummary,{\n                [action.data.type]: updatedIncExpSummary\n            });\n\n            let budget = state.totalBudget;\n            let income = state.totalIncome;\n            let expense = state.totalExpenses;\n\n            if (action.data.type === 'inc') {\n                budget = budget + parseFloat(action.data.value);\n                income = income + parseFloat(action.data.value);\n            }\n\n            if (action.data.type === 'exp') {\n                budget = budget - parseFloat(action.data.value);\n                expense = expense + parseFloat(action.data.value);\n            }\n\n            const percentage = percentageCalculator(expense, income);\n\n            return updateObject(state, {\n                budgetSummary: updatedBudgetSummary,\n                totalBudget: budget,\n                totalIncome: income,\n                totalExpenses: expense,\n                totalPercentage: percentage\n                });\n\n        case actionTypes.REMOVE_iTEM:\n            const incExp = [\n                ...state.budgetSummary[action.payLoad.type]\n            ];\n            const updatedIncExpSummaryRemove = incExp.filter(data => data.id !== action.payLoad.id);\n            const updatedBudgetSummaryRemove = updateObject(state.budgetSummary, {\n                [action.payLoad.type]: updatedIncExpSummaryRemove\n            });\n\n            let budgetRemove = state.totalBudget;\n            let incomeRemove = state.totalIncome;\n            let expenseRemove = state.totalExpenses;\n            const data = incExp.filter(data => data.id === action.payLoad.id);\n\n            if (action.payLoad.type === 'inc') {\n                budgetRemove = budgetRemove - parseFloat(data[0].val);\n                incomeRemove = incomeRemove - parseFloat(data[0].val);\n            }\n\n            if (action.payLoad.type === 'exp') {\n                budgetRemove = budgetRemove + parseFloat(data[0].val);\n                expenseRemove = expenseRemove - parseFloat(data[0].val);\n            }\n\n            const percentageRemove = percentageCalculator(expenseRemove, incomeRemove);\n\n            return updateObject(state, {\n                budgetSummary: updatedBudgetSummaryRemove,\n                totalBudget: budgetRemove,\n                totalIncome: incomeRemove,\n                totalExpenses: expenseRemove,\n                totalPercentage: percentageRemove\n            });\n        default:\n            return state;\n    }\n}\n\nexport default reducer;"]},"metadata":{},"sourceType":"module"}