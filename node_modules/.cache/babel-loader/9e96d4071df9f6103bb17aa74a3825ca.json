{"ast":null,"code":"var _jsxFileName = \"/home/navin/React-tuorial-1/budgettie/src/containers/BudgetBuilder/BudgetBuilder.js\";\nimport React, { Component } from 'react';\nimport Aux from '../../hoc/Aux/Aux';\nimport Budget from '../../components/budget/Budget';\nimport BuildControl from './BuildControl/BuildControl';\nimport { updateObject, percentageCalculator } from '../../Utility/Utility';\nimport Modal from '../../components/UI/Modal/Modal';\nimport ExpSummary from '../../components/BudgetSummary/ExpSummary/ExpSummary';\nimport Button from '../../components/UI/Button/Button';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass BudgetBuilder extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      budgetSummary: {\n        inc: [],\n        exp: []\n      },\n      totalBudget: 0,\n      totalIncome: 0,\n      totalExpenses: 0,\n      totalPercentage: null,\n      showSummary: false\n    };\n\n    this.addSummaryHandler = data => {\n      let id;\n\n      if (this.state.budgetSummary[data.type].length === 0) {\n        id = 0;\n      } else {\n        id = this.state.budgetSummary[data.type][this.state.budgetSummary[data.type].length - 1].id + 1;\n      }\n\n      let summary = {\n        des: data.description,\n        val: parseFloat(data.value).toFixed(2),\n        id: id\n      };\n\n      if (data.type === 'exp') {\n        summary = {\n          des: data.description,\n          val: parseFloat(data.value).toFixed(2),\n          id: id,\n          perc: percentageCalculator(data.value, this.state.totalIncome)\n        };\n      }\n\n      const updatedIncExp = [...this.state.budgetSummary[data.type]];\n      updatedIncExp.push(summary);\n      const updatedBudgetSummary = updateObject(this.state.budgetSummary, {\n        [data.type]: updatedIncExp\n      });\n      let budget = this.state.totalBudget;\n      let income = this.state.totalIncome;\n      let expense = this.state.totalExpenses;\n\n      if (data.type === 'inc') {\n        budget = budget + parseFloat(data.value);\n        income = income + parseFloat(data.value);\n      }\n\n      if (data.type === 'exp') {\n        budget = budget - parseFloat(data.value);\n        expense = expense + parseFloat(data.value);\n      }\n\n      this.setState({\n        budgetSummary: updatedBudgetSummary,\n        totalBudget: budget,\n        totalIncome: income,\n        totalExpenses: expense\n      });\n    };\n\n    this.showSummaryHandler = () => {\n      this.setState({\n        showSummary: true\n      });\n    };\n\n    this.hideSummaryHandler = () => {\n      this.setState({\n        showSummary: false\n      });\n    };\n\n    this.deleteItemHandler = (type, id) => {\n      const incExp = [...this.state.budgetSummary[type]];\n      const updatedIncExp = incExp.filter(data => data.id !== id);\n      const updatedBudgetSummary = updateObject(this.state.budgetSummary, {\n        [type]: updatedIncExp\n      });\n      let budget = this.state.totalBudget;\n      let income = this.state.totalIncome;\n      let expense = this.state.totalExpenses;\n      const data = incExp.filter(data => data.id === id);\n\n      if (type === 'inc') {\n        budget = budget - parseFloat(data[0].val);\n        income = income - parseFloat(data[0].val);\n      }\n\n      if (type === 'exp') {\n        budget = budget + parseFloat(data[0].val);\n        expense = expense - parseFloat(data[0].val);\n      }\n\n      this.setState({\n        budgetSummary: updatedBudgetSummary,\n        totalBudget: budget,\n        totalIncome: income,\n        totalExpenses: expense\n      });\n    };\n  }\n\n  componentDidUpdate() {\n    console.log(this.state);\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(Aux, {\n      children: [/*#__PURE__*/_jsxDEV(Modal, {\n        show: this.state.showSummary,\n        modalClosed: this.hideSummaryHandler,\n        children: /*#__PURE__*/_jsxDEV(ExpSummary, {\n          expensesSummary: this.state.budgetSummary.exp,\n          delete: this.deleteItemHandler\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 128,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 127,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Budget, {\n        totalBudget: this.state.totalBudget,\n        totalIncome: this.state.totalIncome,\n        totalExpenses: this.state.totalExpenses\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 132,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(BuildControl, {\n        clicked: data => this.addSummaryHandler(data)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 136,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Button, {\n        clicked: this.showSummaryHandler,\n        children: \"Show Summary\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 138,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 126,\n      columnNumber: 13\n    }, this);\n  }\n\n}\n\nexport default BudgetBuilder;","map":{"version":3,"sources":["/home/navin/React-tuorial-1/budgettie/src/containers/BudgetBuilder/BudgetBuilder.js"],"names":["React","Component","Aux","Budget","BuildControl","updateObject","percentageCalculator","Modal","ExpSummary","Button","BudgetBuilder","state","budgetSummary","inc","exp","totalBudget","totalIncome","totalExpenses","totalPercentage","showSummary","addSummaryHandler","data","id","type","length","summary","des","description","val","parseFloat","value","toFixed","perc","updatedIncExp","push","updatedBudgetSummary","budget","income","expense","setState","showSummaryHandler","hideSummaryHandler","deleteItemHandler","incExp","filter","componentDidUpdate","console","log","render"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport Aux from '../../hoc/Aux/Aux';\nimport Budget from '../../components/budget/Budget';\nimport BuildControl from './BuildControl/BuildControl';\nimport { updateObject, percentageCalculator } from '../../Utility/Utility';\nimport Modal from '../../components/UI/Modal/Modal';\nimport ExpSummary from '../../components/BudgetSummary/ExpSummary/ExpSummary';\nimport Button from '../../components/UI/Button/Button';\n\n\nclass BudgetBuilder extends Component {\n\n    state = {\n        budgetSummary: {\n            inc: [],\n            exp: []\n        },\n        totalBudget: 0,\n        totalIncome: 0,\n        totalExpenses: 0,\n        totalPercentage: null,\n        showSummary: false\n    }\n\n    addSummaryHandler = data => {\n        let id;\n        if (this.state.budgetSummary[data.type].length === 0) {\n            id = 0;\n        } else {\n            id = this.state.budgetSummary[data.type][this.state.budgetSummary[data.type].length - 1].id + 1;\n        }\n        let summary = {\n                    des: data.description, \n                    val: parseFloat(data.value).toFixed(2),\n                    id: id\n                };\n\n        if (data.type === 'exp') {\n            summary = {\n                des: data.description, \n                val: parseFloat(data.value).toFixed(2),\n                id: id ,\n                perc: percentageCalculator(data.value, this.state.totalIncome)\n            }\n        }\n\n        const updatedIncExp = [ \n            ...this.state.budgetSummary[data.type] \n            ];\n\n        updatedIncExp.push(summary);\n\n        const updatedBudgetSummary = updateObject(this.state.budgetSummary,{\n            [data.type]: updatedIncExp\n        });\n\n        let budget = this.state.totalBudget;\n        let income = this.state.totalIncome;\n        let expense = this.state.totalExpenses;\n\n        if (data.type === 'inc') {\n            budget = budget + parseFloat(data.value);\n            income = income + parseFloat(data.value);\n        }\n\n        if (data.type === 'exp') {\n            budget = budget - parseFloat(data.value);\n            expense = expense + parseFloat(data.value);\n        }\n\n        this.setState({\n            budgetSummary: updatedBudgetSummary,\n            totalBudget: budget,\n            totalIncome: income,\n            totalExpenses: expense\n        });\n        \n    }\n\n    showSummaryHandler = () => {\n        this.setState({showSummary: true});\n    }\n\n    hideSummaryHandler = () => {\n        this.setState({showSummary: false});\n    }\n\n    componentDidUpdate() {\n        console.log(this.state);\n    }\n\n    deleteItemHandler = (type, id) => {\n        const incExp = [\n            ...this.state.budgetSummary[type]\n        ];\n        const updatedIncExp = incExp.filter(data => data.id !== id);\n        const updatedBudgetSummary = updateObject(this.state.budgetSummary, {\n            [type]: updatedIncExp\n        });\n\n        let budget = this.state.totalBudget;\n        let income = this.state.totalIncome;\n        let expense = this.state.totalExpenses;\n        const data = incExp.filter(data => data.id === id);\n\n        if (type === 'inc') {\n            budget = budget - parseFloat(data[0].val);\n            income = income - parseFloat(data[0].val);\n        }\n\n        if (type === 'exp') {\n            budget = budget + parseFloat(data[0].val);\n            expense = expense - parseFloat(data[0].val);\n        }\n\n        this.setState({\n            budgetSummary: updatedBudgetSummary,\n            totalBudget: budget,\n            totalIncome: income,\n            totalExpenses: expense\n        });\n    }\n\n    render () {\n        return (\n            <Aux>\n                <Modal show={this.state.showSummary} modalClosed={this.hideSummaryHandler}>\n                    <ExpSummary \n                        expensesSummary={this.state.budgetSummary.exp} \n                        delete={this.deleteItemHandler} />\n                </Modal> \n                <Budget\n                totalBudget={this.state.totalBudget}\n                totalIncome={this.state.totalIncome}\n                totalExpenses={this.state.totalExpenses} />\n                <BuildControl \n                clicked={(data) => this.addSummaryHandler(data)} />\n                <Button clicked={this.showSummaryHandler}>Show Summary</Button>\n            </Aux>\n        );\n    }\n}\n\nexport default BudgetBuilder;"]},"metadata":{},"sourceType":"module"}