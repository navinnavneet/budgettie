{"ast":null,"code":"import * as actionTypes from '../actions/actionTypes';\nimport { updateObject, percentageCalculator } from '../../Utility/Utility';\nconst initialState = {\n  budgetSummary: {\n    inc: [],\n    exp: []\n  },\n  totalBudget: 0,\n  totalIncome: 0,\n  totalExpenses: 0,\n  totalPercentage: null\n};\n\nconst addItem = (state, action) => {\n  action.event.preventDefault();\n  let id;\n\n  if (state.budgetSummary[action.data.type].length === 0) {\n    id = 0;\n  } else {\n    id = state.budgetSummary[action.data.type][state.budgetSummary[action.data.type].length - 1].id + 1;\n  }\n\n  let budget = state.totalBudget;\n  let income = state.totalIncome;\n  let expense = state.totalExpenses;\n  let updatedBudgetSummary;\n\n  if (action.data.type === 'inc') {\n    budget = budget + parseFloat(action.data.value.value);\n    income = income + parseFloat(action.data.value.value);\n    const incBudget = {\n      des: action.data.description.value,\n      val: parseFloat(action.data.value.value).toFixed(2),\n      id: id\n    };\n    const incBudgetSummary = [...state.budgetSummary.inc];\n    incBudgetSummary.push(incBudget);\n    const expBudgetArr = [...state.budgetSummary.exp];\n    let expBudgetSummary;\n\n    if (expBudgetArr.length) {\n      expBudgetSummary = expBudgetArr.map(expBudget => {\n        const perc = percentageCalculator(expBudget.val, income);\n        return updateObject(expBudget, {\n          perc: perc\n        });\n      });\n      updatedBudgetSummary = updateObject(state.budgetSummary, {\n        inc: incBudgetSummary,\n        exp: expBudgetSummary\n      });\n    } else {\n      updatedBudgetSummary = updateObject(state.budgetSummary, {\n        inc: incBudgetSummary\n      });\n    }\n  }\n\n  if (action.data.type === 'exp') {\n    budget = budget - parseFloat(action.data.value.value);\n    expense = expense + parseFloat(action.data.value.value);\n    const expBudget = {\n      des: action.data.description.value,\n      val: parseFloat(action.data.value.value).toFixed(2),\n      id: id,\n      perc: percentageCalculator(action.data.value.value, income)\n    };\n    const expBudgetSummary = [...state.budgetSummary.exp];\n    expBudgetSummary.push(expBudget);\n    updatedBudgetSummary = updateObject(state.budgetSummary, {\n      exp: expBudgetSummary\n    });\n  }\n\n  const percentage = percentageCalculator(expense, income);\n  Array.from(document.querySelectorAll(\"input\")).forEach(input => input.value = null);\n  return updateObject(state, {\n    budgetSummary: updatedBudgetSummary,\n    totalBudget: budget,\n    totalIncome: income,\n    totalExpenses: expense,\n    totalPercentage: percentage\n  });\n};\n\nconst removeItem = (state, action) => {\n  const incExp = [...state.budgetSummary[action.payLoad.type]];\n  const updatedIncExpSummaryRemove = incExp.filter(data => data.id !== action.payLoad.id);\n  let updatedBudgetSummaryRemove = updateObject(state.budgetSummary, {\n    [action.payLoad.type]: updatedIncExpSummaryRemove\n  });\n  let budgetRemove = state.totalBudget;\n  let incomeRemove = state.totalIncome;\n  let expenseRemove = state.totalExpenses;\n  const data = incExp.filter(data => data.id === action.payLoad.id);\n\n  if (action.payLoad.type === 'inc') {\n    budgetRemove = budgetRemove - parseFloat(data[0].val);\n    incomeRemove = incomeRemove - parseFloat(data[0].val);\n    const expBudgetArr = [...state.budgetSummary.exp];\n    const expBudgetSummary = expBudgetArr.map(expBudget => {\n      const perc = percentageCalculator(expBudget.val, incomeRemove);\n      return updateObject(expBudget, {\n        perc: perc\n      });\n    });\n    updatedBudgetSummaryRemove = updateObject(state.budgetSummary, {\n      exp: expBudgetSummary,\n      inc: updatedIncExpSummaryRemove\n    });\n  }\n\n  if (action.payLoad.type === 'exp') {\n    budgetRemove = budgetRemove + parseFloat(data[0].val);\n    expenseRemove = expenseRemove - parseFloat(data[0].val);\n  }\n\n  const percentageRemove = percentageCalculator(expenseRemove, incomeRemove);\n  return updateObject(state, {\n    budgetSummary: updatedBudgetSummaryRemove,\n    totalBudget: budgetRemove,\n    totalIncome: incomeRemove,\n    totalExpenses: expenseRemove,\n    totalPercentage: percentageRemove\n  });\n};\n\nconst reducer = (state = initialState, action) => {\n  switch (action.type) {\n    case actionTypes.ADD_iTEM:\n      return addItem(state, action);\n\n    case actionTypes.REMOVE_iTEM:\n      return removeItem(state, action);\n\n    default:\n      return state;\n  }\n};\n\nexport default reducer;","map":{"version":3,"sources":["/home/navin/React-tuorial-1/budgettie/src/store/reducers/budgetSummary.js"],"names":["actionTypes","updateObject","percentageCalculator","initialState","budgetSummary","inc","exp","totalBudget","totalIncome","totalExpenses","totalPercentage","addItem","state","action","event","preventDefault","id","data","type","length","budget","income","expense","updatedBudgetSummary","parseFloat","value","incBudget","des","description","val","toFixed","incBudgetSummary","push","expBudgetArr","expBudgetSummary","map","expBudget","perc","percentage","Array","from","document","querySelectorAll","forEach","input","removeItem","incExp","payLoad","updatedIncExpSummaryRemove","filter","updatedBudgetSummaryRemove","budgetRemove","incomeRemove","expenseRemove","percentageRemove","reducer","ADD_iTEM","REMOVE_iTEM"],"mappings":"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","sourcesContent":["import * as actionTypes from '../actions/actionTypes';\nimport { updateObject, percentageCalculator } from '../../Utility/Utility';\n\nconst initialState = {\n    budgetSummary: {\n            inc: [], \n            exp: [],\n        },\n    totalBudget: 0,\n    totalIncome: 0,\n    totalExpenses: 0,\n    totalPercentage: null\n}\n\nconst addItem = (state, action) => {\n    action.event.preventDefault();\n    let id;\n    if (state.budgetSummary[action.data.type].length === 0) {\n        id = 0;\n    } else {\n        id = state.budgetSummary[action.data.type][state.budgetSummary[action.data.type].length - 1].id + 1;\n    }\n\n    let budget = state.totalBudget;\n    let income = state.totalIncome;\n    let expense = state.totalExpenses;\n    let updatedBudgetSummary;\n\n    if (action.data.type === 'inc') {\n        budget = budget + parseFloat(action.data.value.value);\n        income = income + parseFloat(action.data.value.value);\n        const incBudget = {\n            des: action.data.description.value, \n            val: parseFloat(action.data.value.value).toFixed(2),\n            id: id\n        };\n        const incBudgetSummary = [\n            ...state.budgetSummary.inc\n        ];\n        incBudgetSummary.push(incBudget);\n\n        const expBudgetArr = [\n            ...state.budgetSummary.exp\n        ];\n\n        let expBudgetSummary;\n        if (expBudgetArr.length) {\n            expBudgetSummary = expBudgetArr.map(expBudget => {\n                const perc = percentageCalculator(expBudget.val, income);\n                return updateObject(expBudget, {\n                    perc: perc\n                });\n            });\n            updatedBudgetSummary = updateObject(state.budgetSummary, {\n                inc: incBudgetSummary,\n                exp: expBudgetSummary\n            });\n        } else {\n            updatedBudgetSummary = updateObject(state.budgetSummary, {\n                inc: incBudgetSummary\n            });\n        }\n    }\n\n    if (action.data.type === 'exp') {\n        budget = budget - parseFloat(action.data.value.value);\n        expense = expense + parseFloat(action.data.value.value);\n        const expBudget = {\n            des: action.data.description.value, \n            val: parseFloat(action.data.value.value).toFixed(2),\n            id: id ,\n            perc: percentageCalculator(action.data.value.value, income)\n        };\n        const expBudgetSummary = [\n            ...state.budgetSummary.exp\n        ];\n        expBudgetSummary.push(expBudget);\n        updatedBudgetSummary = updateObject(state.budgetSummary, {\n            exp: expBudgetSummary\n        });\n    }\n\n    const percentage = percentageCalculator(expense, income);\n\n    Array.from(document.querySelectorAll(\"input\"))\n    .forEach(input => (input.value = null)\n    );\n\n\n    return updateObject(state, {\n        budgetSummary: updatedBudgetSummary,\n        totalBudget: budget,\n        totalIncome: income,\n        totalExpenses: expense,\n        totalPercentage: percentage\n    });\n}\n\nconst removeItem = (state, action) => {\n    const incExp = [\n        ...state.budgetSummary[action.payLoad.type]\n    ];\n    const updatedIncExpSummaryRemove = incExp.filter(data => data.id !== action.payLoad.id);\n    let updatedBudgetSummaryRemove = updateObject(state.budgetSummary, {\n        [action.payLoad.type]: updatedIncExpSummaryRemove\n    });\n\n    let budgetRemove = state.totalBudget;\n    let incomeRemove = state.totalIncome;\n    let expenseRemove = state.totalExpenses;\n    const data = incExp.filter(data => data.id === action.payLoad.id);\n\n    if (action.payLoad.type === 'inc') {\n        budgetRemove = budgetRemove - parseFloat(data[0].val);\n        incomeRemove = incomeRemove - parseFloat(data[0].val);\n        const expBudgetArr = [\n            ...state.budgetSummary.exp\n        ];\n\n        const expBudgetSummary = expBudgetArr.map(expBudget => {\n            const perc = percentageCalculator(expBudget.val, incomeRemove);\n            return updateObject(expBudget, {\n                perc: perc\n            })\n        });\n        updatedBudgetSummaryRemove = updateObject(state.budgetSummary, {\n            exp: expBudgetSummary,\n            inc: updatedIncExpSummaryRemove\n        })\n    }\n\n    if (action.payLoad.type === 'exp') {\n        budgetRemove = budgetRemove + parseFloat(data[0].val);\n        expenseRemove = expenseRemove - parseFloat(data[0].val);\n    }\n\n    const percentageRemove = percentageCalculator(expenseRemove, incomeRemove);\n\n    return updateObject(state, {\n        budgetSummary: updatedBudgetSummaryRemove,\n        totalBudget: budgetRemove,\n        totalIncome: incomeRemove,\n        totalExpenses: expenseRemove,\n        totalPercentage: percentageRemove\n    });\n}\n\nconst reducer = (state = initialState, action) => {\n    switch (action.type) {\n        case actionTypes.ADD_iTEM: return addItem (state, action);\n\n        case actionTypes.REMOVE_iTEM: return removeItem(state, action);\n\n        default: return state;\n    }\n}\n\nexport default reducer;"]},"metadata":{},"sourceType":"module"}