{"ast":null,"code":"import * as actionTypes from '../actions/actionTypes';\nimport { updateObject, percentageCalculator } from '../../Utility/Utility';\nconst initialState = {\n  budgetSummary: {\n    inc: [],\n    exp: []\n  },\n  totalBudget: 0,\n  totalIncome: 0,\n  totalExpenses: 0,\n  totalPercentage: null,\n  data: {\n    inc: {\n      description: null,\n      value: null,\n      type: 'inc'\n    },\n    exp: {\n      description: null,\n      value: null,\n      type: 'exp'\n    }\n  },\n  showSummary: false\n};\n\nconst takeInput = (state, action) => {\n  const updatedIncExp = updateObject(state.data[action.payLoad.incExp], {\n    [action.payLoad.type]: action.payLoad.event.target.value\n  });\n  const updatedData = updateObject(state.data, {\n    [action.payLoad.incExp]: updatedIncExp\n  });\n  return updateObject(state, {\n    data: updatedData\n  });\n};\n\nconst addItem = (state, action) => {\n  let id;\n\n  if (state.budgetSummary[action.data.type].length === 0) {\n    id = 0;\n  } else {\n    id = state.budgetSummary[action.data.type][state.budgetSummary[action.data.type].length - 1].id + 1;\n  }\n\n  let budget = state.totalBudget;\n  let income = state.totalIncome;\n  let expense = state.totalExpenses;\n\n  if (action.data.type === 'inc') {\n    budget = budget + parseFloat(action.data.value);\n    income = income + parseFloat(action.data.value);\n  }\n\n  if (action.data.type === 'exp') {\n    budget = budget - parseFloat(action.data.value);\n    expense = expense + parseFloat(action.data.value);\n  }\n\n  const percentage = percentageCalculator(expense, income);\n  const incBudgetSummary = {\n    des: action.data.description,\n    val: parseFloat(action.data.value).toFixed(2),\n    id: id\n  };\n  const expBudgetSummary = {\n    des: action.data.description,\n    val: parseFloat(action.data.value).toFixed(2),\n    id: id,\n    perc: percentageCalculator(action.data.value, income)\n  };\n  const updatedBudgetSummary = updateObject(state.budgetSummary, {\n    inc: incBudgetSummary,\n    exp: expBudgetSummary\n  });\n  return updateObject(state, {\n    budgetSummary: updatedBudgetSummary,\n    totalBudget: budget,\n    totalIncome: income,\n    totalExpenses: expense,\n    totalPercentage: percentage\n  });\n};\n\nconst reducer = (state = initialState, action) => {\n  switch (action.type) {\n    case actionTypes.TAKE_INPUT:\n      return takeInput(state, action);\n\n    case actionTypes.ADD_iTEM:\n      return addItem(state, action);\n\n    case actionTypes.REMOVE_iTEM:\n      const incExp = [...state.budgetSummary[action.payLoad.type]];\n      const updatedIncExpSummaryRemove = incExp.filter(data => data.id !== action.payLoad.id);\n      const updatedBudgetSummaryRemove = updateObject(state.budgetSummary, {\n        [action.payLoad.type]: updatedIncExpSummaryRemove\n      });\n      let budgetRemove = state.totalBudget;\n      let incomeRemove = state.totalIncome;\n      let expenseRemove = state.totalExpenses;\n      const data = incExp.filter(data => data.id === action.payLoad.id);\n\n      if (action.payLoad.type === 'inc') {\n        budgetRemove = budgetRemove - parseFloat(data[0].val);\n        incomeRemove = incomeRemove - parseFloat(data[0].val);\n      }\n\n      if (action.payLoad.type === 'exp') {\n        budgetRemove = budgetRemove + parseFloat(data[0].val);\n        expenseRemove = expenseRemove - parseFloat(data[0].val);\n      }\n\n      const percentageRemove = percentageCalculator(expenseRemove, incomeRemove);\n      return updateObject(state, {\n        budgetSummary: updatedBudgetSummaryRemove,\n        totalBudget: budgetRemove,\n        totalIncome: incomeRemove,\n        totalExpenses: expenseRemove,\n        totalPercentage: percentageRemove\n      });\n\n    case actionTypes.SHOW_SUMMARY:\n      return updateObject(state, {\n        showSummary: true\n      });\n\n    case actionTypes.HIDE_SUMMARY:\n      return updateObject(state, {\n        showSummary: false\n      });\n\n    default:\n      return state;\n  }\n};\n\nexport default reducer;","map":{"version":3,"sources":["/home/navin/React-tuorial-1/budgettie/src/store/reducers/reducers.js"],"names":["actionTypes","updateObject","percentageCalculator","initialState","budgetSummary","inc","exp","totalBudget","totalIncome","totalExpenses","totalPercentage","data","description","value","type","showSummary","takeInput","state","action","updatedIncExp","payLoad","incExp","event","target","updatedData","addItem","id","length","budget","income","expense","parseFloat","percentage","incBudgetSummary","des","val","toFixed","expBudgetSummary","perc","updatedBudgetSummary","reducer","TAKE_INPUT","ADD_iTEM","REMOVE_iTEM","updatedIncExpSummaryRemove","filter","updatedBudgetSummaryRemove","budgetRemove","incomeRemove","expenseRemove","percentageRemove","SHOW_SUMMARY","HIDE_SUMMARY"],"mappings":"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","sourcesContent":["import * as actionTypes from '../actions/actionTypes';\nimport { updateObject, percentageCalculator } from '../../Utility/Utility';\n\nconst initialState = {\n        budgetSummary: {\n            inc: [],\n            exp: []\n        },\n        totalBudget: 0,\n        totalIncome: 0,\n        totalExpenses: 0,\n        totalPercentage: null,\n        data: {\n            inc: {\n                description: null,\n                value: null,\n                type: 'inc'\n            },\n            exp: {\n                description: null,\n                value: null,\n                type: 'exp'\n            }\n        },\n        showSummary: false\n    }\n\nconst takeInput = (state, action) => {\n    const updatedIncExp = updateObject(state.data[action.payLoad.incExp], {\n                [action.payLoad.type]: action.payLoad.event.target.value\n            });\n            const updatedData = updateObject(state.data, {\n                [action.payLoad.incExp]: updatedIncExp\n            });\n            return updateObject(state, {\n                data: updatedData\n            });\n}\n\nconst addItem = (state, action) => {\n    let id;\n            if (state.budgetSummary[action.data.type].length === 0) {\n                id = 0;\n            } else {\n                id = state.budgetSummary[action.data.type][state.budgetSummary[action.data.type].length - 1].id + 1;\n            }\n\n            let budget = state.totalBudget;\n            let income = state.totalIncome;\n            let expense = state.totalExpenses;\n\n            if (action.data.type === 'inc') {\n                budget = budget + parseFloat(action.data.value);\n                income = income + parseFloat(action.data.value);\n            }\n\n            if (action.data.type === 'exp') {\n                budget = budget - parseFloat(action.data.value);\n                expense = expense + parseFloat(action.data.value);\n            }\n\n            const percentage = percentageCalculator(expense, income);\n\n            const incBudgetSummary = {\n                    des: action.data.description, \n                    val: parseFloat(action.data.value).toFixed(2),\n                    id: id \n                };\n\n            const expBudgetSummary = {\n                    des: action.data.description, \n                    val: parseFloat(action.data.value).toFixed(2),\n                    id: id ,\n                    perc: percentageCalculator(action.data.value, income)\n                };\n\n            const updatedBudgetSummary = updateObject(state.budgetSummary, {\n                inc: incBudgetSummary,\n                exp: expBudgetSummary\n            })\n\n            return updateObject(state, {\n                budgetSummary: updatedBudgetSummary,\n                totalBudget: budget,\n                totalIncome: income,\n                totalExpenses: expense,\n                totalPercentage: percentage\n                });\n}\n\nconst reducer = (state = initialState, action) => {\n    switch (action.type) {\n        case actionTypes.TAKE_INPUT: return takeInput(state, action);\n\n        case actionTypes.ADD_iTEM: return addItem (state, action);\n\n        case actionTypes.REMOVE_iTEM:\n            const incExp = [\n                ...state.budgetSummary[action.payLoad.type]\n            ];\n            const updatedIncExpSummaryRemove = incExp.filter(data => data.id !== action.payLoad.id);\n            const updatedBudgetSummaryRemove = updateObject(state.budgetSummary, {\n                [action.payLoad.type]: updatedIncExpSummaryRemove\n            });\n\n            let budgetRemove = state.totalBudget;\n            let incomeRemove = state.totalIncome;\n            let expenseRemove = state.totalExpenses;\n            const data = incExp.filter(data => data.id === action.payLoad.id);\n\n            if (action.payLoad.type === 'inc') {\n                budgetRemove = budgetRemove - parseFloat(data[0].val);\n                incomeRemove = incomeRemove - parseFloat(data[0].val);\n            }\n\n            if (action.payLoad.type === 'exp') {\n                budgetRemove = budgetRemove + parseFloat(data[0].val);\n                expenseRemove = expenseRemove - parseFloat(data[0].val);\n            }\n\n            const percentageRemove = percentageCalculator(expenseRemove, incomeRemove);\n\n            return updateObject(state, {\n                budgetSummary: updatedBudgetSummaryRemove,\n                totalBudget: budgetRemove,\n                totalIncome: incomeRemove,\n                totalExpenses: expenseRemove,\n                totalPercentage: percentageRemove\n            });\n\n        case actionTypes.SHOW_SUMMARY: \n                return updateObject(state, {\n                showSummary: true\n            });\n\n        case actionTypes.HIDE_SUMMARY: \n            return updateObject(state, {\n                showSummary: false\n            });\n        default:\n            return state;\n    }\n}\n\nexport default reducer;"]},"metadata":{},"sourceType":"module"}