{"ast":null,"code":"import * as actionTypes from '../actions/actionTypes';\nimport { updateObject, checkValidity } from '../../Utility/Utility';\nconst initialState = {\n  data: {\n    inc: {\n      description: {\n        value: '',\n        rules: {\n          isRequired: true\n        }\n      },\n      value: {\n        value: 0,\n        rules: {\n          isRequired: true,\n          isNumeric: true\n        }\n      },\n      type: 'inc'\n    },\n    exp: {\n      description: {\n        value: '',\n        rules: {\n          isRequired: true\n        }\n      },\n      value: {\n        value: 0,\n        rules: {\n          isRequired: true\n        }\n      },\n      type: 'exp'\n    }\n  },\n  showSummary: false,\n  isIncome: true,\n  event: null,\n  isValid: false\n};\n\nconst takeInput = (state, action) => {\n  const updatedIncExpType = updateObject(state.data[action.payLoad.incExp].value, {\n    value: action.payLoad.event.target.value\n  });\n  const updatedIncExp = updateObject(state.data[action.payLoad.incExp], {\n    [action.payLoad.type]: updatedIncExpType\n  });\n  const updatedData = updateObject(state.data, {\n    [action.payLoad.incExp]: updatedIncExp\n  });\n  let isValid = false;\n\n  if (checkValidity(updatedData[action.payLoad.incExp].description.value, updatedData[action.payLoad.incExp].description.rules) && checkValidity(updatedData[action.payLoad.incExp].value.value, updatedData[action.payLoad.incExp].value.rules)) {\n    isValid = true;\n  }\n\n  console.log(checkValidity(updatedData[action.payLoad.incExp].description.value, updatedData[action.payLoad.incExp].description.rules));\n  console.log(checkValidity(updatedData[action.payLoad.incExp].value.value, updatedData[action.payLoad.incExp].value.rules));\n  return updateObject(state, {\n    data: updatedData,\n    event: action.payLoad.event,\n    isValid: isValid\n  });\n};\n\nconst hideSummary = (state, action) => {\n  return updateObject(state, {\n    showSummary: false\n  });\n};\n\nconst showSummary = (state, action) => {\n  return updateObject(state, {\n    showSummary: true\n  });\n};\n\nconst switchIncExp = (state, action) => {\n  const isInc = state.isIncome;\n  return updateObject(state, {\n    isIncome: !isInc\n  });\n};\n\nconst reducer = (state = initialState, action) => {\n  switch (action.type) {\n    case actionTypes.TAKE_INPUT:\n      return takeInput(state, action);\n\n    case actionTypes.SHOW_SUMMARY:\n      return showSummary(state, action);\n\n    case actionTypes.HIDE_SUMMARY:\n      return hideSummary(state, action);\n\n    case actionTypes.SWITCH_INC_EXP:\n      return switchIncExp(state, action);\n\n    default:\n      return state;\n  }\n};\n\nexport default reducer;","map":{"version":3,"sources":["/home/navin/React-tuorial-1/budgettie/src/store/reducers/budgetBuilder.js"],"names":["actionTypes","updateObject","checkValidity","initialState","data","inc","description","value","rules","isRequired","isNumeric","type","exp","showSummary","isIncome","event","isValid","takeInput","state","action","updatedIncExpType","payLoad","incExp","target","updatedIncExp","updatedData","console","log","hideSummary","switchIncExp","isInc","reducer","TAKE_INPUT","SHOW_SUMMARY","HIDE_SUMMARY","SWITCH_INC_EXP"],"mappings":"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","sourcesContent":["import * as actionTypes from '../actions/actionTypes';\nimport { updateObject, checkValidity } from '../../Utility/Utility';\n\nconst initialState = {\n        data: { \n            inc: {\n                description: {\n                    value: '',\n                    rules: {\n                        isRequired: true\n                    }\n                },\n                value: {\n                    value: 0,\n                    rules: {\n                        isRequired: true,\n                        isNumeric: true\n                    }\n                },\n                type: 'inc'\n            },\n            exp: {\n                description: {\n                    value: '',\n                    rules: {\n                        isRequired: true\n                    }\n                },\n                value: {\n                    value: 0,\n                    rules: {\n                        isRequired: true\n                    }\n                },\n                type: 'exp'\n            }\n        },\n        showSummary: false,\n        isIncome: true,\n        event: null,\n        isValid: false\n    }\n\nconst takeInput = (state, action) => {\n    const updatedIncExpType = updateObject(state.data[action.payLoad.incExp].value, {\n        value: action.payLoad.event.target.value\n    });\n    const updatedIncExp = updateObject(state.data[action.payLoad.incExp], {\n                [action.payLoad.type]: updatedIncExpType\n            });\n            const updatedData = updateObject(state.data, {\n                [action.payLoad.incExp]: updatedIncExp\n            });\n\n            let isValid = false;\n            if(checkValidity(updatedData[action.payLoad.incExp].description.value, \n                                updatedData[action.payLoad.incExp].description.rules) &&\n                checkValidity(updatedData[action.payLoad.incExp].value.value, \n                                updatedData[action.payLoad.incExp].value.rules)) {\n                    isValid = true;\n                }\n            console.log(checkValidity(updatedData[action.payLoad.incExp].description.value, \n                                updatedData[action.payLoad.incExp].description.rules)\n                                );\n            console.log(checkValidity(updatedData[action.payLoad.incExp].value.value, \n                                updatedData[action.payLoad.incExp].value.rules))\n            \n            return updateObject(state, {\n                data: updatedData,\n                event: action.payLoad.event,\n                isValid: isValid\n            });\n}\n\n\nconst hideSummary = (state, action) => {\n    return updateObject(state, {\n        showSummary: false\n    });\n}\n\nconst showSummary = (state, action) => {\n    return updateObject(state, {\n        showSummary: true\n    });\n}\n\nconst switchIncExp = (state, action) => {\n    const isInc = state.isIncome;\n    return updateObject(state, {\n        isIncome: !isInc\n    });\n}\n\nconst reducer = (state = initialState, action) => {\n    switch (action.type) {\n        case actionTypes.TAKE_INPUT: return takeInput(state, action);\n\n        case actionTypes.SHOW_SUMMARY: return showSummary(state, action);\n\n        case actionTypes.HIDE_SUMMARY: return hideSummary(state, action);\n\n        case actionTypes.SWITCH_INC_EXP: return switchIncExp(state, action);\n\n        default: return state;\n    }\n}\n\nexport default reducer;"]},"metadata":{},"sourceType":"module"}